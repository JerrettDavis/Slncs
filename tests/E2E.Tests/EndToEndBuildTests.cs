using System;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;
using Xunit;
using Xunit.Abstractions;

namespace E2E.Tests;

public class EndToEndBuildTests(ITestOutputHelper output)
{
    private static string RepoRoot()
    {
        var bin = AppContext.BaseDirectory;
        return Path.GetFullPath(Path.Combine(bin, "..", "..", "..", "..", ".."));
    }

    [Fact]
    public void Dotnet_Build_Works_On_Slncs_Wrapper()
    {
        var root = RepoRoot();
        var samplesDir = Path.Combine(root, "samples");
        var wrapper = Path.Combine(samplesDir, "MyCsSln.slncs");
        Assert.True(File.Exists(wrapper), "Sample wrapper must exist.");

        var psi = new ProcessStartInfo("dotnet", $"build \"{wrapper}\" -c Debug -v:m --nologo")
        {
            RedirectStandardError = true,
            RedirectStandardOutput = true,
            UseShellExecute = false,
            WorkingDirectory = samplesDir
        };
        var p = Process.Start(psi)!;
        p.WaitForExit();
        var stdout = p.StandardOutput.ReadToEnd();
        var stderr = p.StandardError.ReadToEnd();
        if (p.ExitCode != 0)
        {
            output.WriteLine("--- wrapper stdout ---\n" + stdout);
            output.WriteLine("--- wrapper stderr ---\n" + stderr);
        }
        Assert.Equal(0, p.ExitCode);
        output.WriteLine(stdout);

        var slnx = Path.Combine(samplesDir, "obj", "MyCsSln.slnx");
        Assert.True(File.Exists(slnx), ".slnx should be generated by wrapper.");

        var consoleDll = Path.Combine(samplesDir, "src", "ConsoleApp1", "bin", "Debug", "net8.0", "ConsoleApp1.dll");
        if (!File.Exists(consoleDll))
        {
            output.WriteLine("ConsoleApp1.dll missing; dumping directory tree under samples/src:");
            foreach (var path in Directory.EnumerateFiles(Path.Combine(samplesDir, "src"), "*", SearchOption.AllDirectories))
                output.WriteLine(path);
        }
        Assert.True(File.Exists(consoleDll), "Console application should have been built by direct parse pipeline.");
    }
}