<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Slncs</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Shim for <c>SetsRequiredMembersAttribute</c> used when targeting frameworks that do not
            expose the attribute. Indicates that invoking the annotated constructor sets all
            required members for the constructed type.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Shim for <c>RequiresUnreferencedCodeAttribute</c>; applied to APIs that are incompatible
            with trimming or require dynamic code preservation.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Shim for <c>RequiresUnreferencedCodeAttribute</c>; applied to APIs that are incompatible
            with trimming or require dynamic code preservation.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>Explanatory message describing why the annotated member is unsafe for trimming.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Shim for the C# 11 <c>RequiredMemberAttribute</c>, applied to members that must be
            initialized during object construction (usually in object initializers or by constructors).
            Present only for target frameworks that lack the built-in attribute.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Shim for <c>CompilerFeatureRequiredAttribute</c>, used by the compiler to detect presence
            of specific language features. Provided to avoid compile-time errors on older frameworks.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>Create the attribute with the required feature name.</summary>
            <param name="name">Name of the compiler feature.</param>
        </member>
        <member name="T:Slncs.Solution">
            <summary>
            Entry point for constructing a solution description using a fluent C# DSL.
            </summary>
            <remarks>
            A <c>Solution</c> is materialized into a compact <c>.slnx</c> XML format that lists
            projects, logical folders and loose files. Use <see cref="M:Slncs.Solution.Create"/> to begin and
            chain <see cref="T:Slncs.SolutionBuilder"/> calls. Finally call <see cref="M:Slncs.SolutionBuilder.Write(System.String)"/>
            (or <see cref="M:Slncs.SolutionBuilder.Build"/> to obtain an <see cref="T:System.Xml.Linq.XDocument"/>).
            </remarks>
        </member>
        <member name="M:Slncs.Solution.Create">
            <summary>
            Create a new mutable <see cref="T:Slncs.SolutionBuilder"/> instance to describe a solution.
            </summary>
        </member>
        <member name="T:Slncs.SolutionBuilder">
            <summary>
            Fluent builder for describing solution contents (projects, folders, files) and writing a <c>.slnx</c>.
            </summary>
            <remarks>
            The builder de-duplicates identical entries (same project path, file path, folder name) and
            produces a stable, sorted XML representation to aid reproducible builds and diffing.
            </remarks>
        </member>
        <member name="M:Slncs.SolutionBuilder.Project(System.String)">
            <summary>
            Add a project reference to the solution.
            </summary>
            <param name="path">Relative (recommended) or absolute path to a <c>.csproj</c> (or other MSBuild project).</param>
            <returns>The current <see cref="T:Slncs.SolutionBuilder"/> for chaining.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="path"/> is null or whitespace.</exception>
        </member>
        <member name="M:Slncs.SolutionBuilder.Folder(System.String,System.Action{Slncs.SolutionBuilder.FolderBuilder})">
            <summary>
            Add a logical folder (which may contain files and subfolders) to the solution.
            </summary>
            <param name="name">Display name of the folder (a trailing slash is optional).</param>
            <param name="configure">Delegate that populates the folder via a nested <see cref="T:Slncs.SolutionBuilder.FolderBuilder"/>.</param>
            <returns>The current <see cref="T:Slncs.SolutionBuilder"/> for chaining.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is null or whitespace.</exception>
        </member>
        <member name="M:Slncs.SolutionBuilder.Build">
            <summary>Return the in-memory XML (<see cref="T:System.Xml.Linq.XDocument"/>) representing the solution.</summary>
            <remarks>
            Call <see cref="M:Slncs.SolutionBuilder.Write(System.String)"/> to persist to disk. The output XML root element is <c>&lt;Solution&gt;</c>.
            </remarks>
        </member>
        <member name="M:Slncs.SolutionBuilder.Write(System.String)">
            <summary>
            Generate the <c>.slnx</c> file at the specified path (directory is created if necessary).
            </summary>
            <param name="slnxPath">Path to write. If it does not end with <c>.slnx</c>, the extension is appended.</param>
        </member>
        <member name="T:Slncs.SolutionBuilder.FolderBuilder">
            <summary>
            Fluent builder for a logical solution folder (may contain files and child folders).
            </summary>
        </member>
        <member name="M:Slncs.SolutionBuilder.FolderBuilder.File(System.String)">
            <summary>Add a single file entry to the folder.</summary>
            <param name="path">Relative or absolute path to a file.</param>
        </member>
        <member name="M:Slncs.SolutionBuilder.FolderBuilder.Files(System.String[])">
            <summary>Add multiple file entries in one call.</summary>
            <param name="paths">File paths to add.</param>
        </member>
        <member name="M:Slncs.SolutionBuilder.FolderBuilder.Folder(System.String,System.Action{Slncs.SolutionBuilder.FolderBuilder})">
            <summary>Create and configure a nested child folder.</summary>
            <param name="name">Child folder name.</param>
            <param name="configure">Delegate to populate the child folder.</param>
        </member>
    </members>
</doc>
